# Encrypted by Noctura
import base64
exec(base64.b64decode("ZnJvbSByaWNoLmNvbnNvbGUgaW1wb3J0IENvbnNvbGUKZnJvbSByaWNoLnBhbmVsIGltcG9ydCBQYW5lbApmcm9tIHJpY2gucHJvZ3Jlc3MgaW1wb3J0IHRyYWNrCmZyb20gdGltZSBpbXBvcnQgc2xlZXAKaW1wb3J0IGJhc2U2NAppbXBvcnQgb3MKCmNvbnNvbGUgPSBDb25zb2xlKCkKCmRlZiBiYW5uZXJfZW5jcnlwdG9yKHRpdGxlPSJFbmNyeXB0b3IiKToKICAgIG9zLnN5c3RlbSgiY2xlYXIiKQogICAgYXNjaWlfYXJ0ID0gciIiIgrilZTilZfilZTilZfilIDilIDilIDilZTilZDilabilabilZDilabilZDilabilZDilZDilabilZfilZTilabilZDilabilZDilZDilZcK4pWa4pWX4pWU4pWd4pWU4pWQ4pWX4pWR4pWR4pWR4pWR4pWR4pWR4pWU4pWp4pWX4pWU4pWj4pWR4pWR4pWR4pWs4pWR4pWU4pWX4pWRCuKVlOKVneKVmuKVl+KVmuKVkOKVneKVkeKVkeKVkeKVkeKVkeKVkeKVmuKVl+KVkeKVkeKVkeKVmuKVneKVkeKVl+KVo+KVoOKVo+KVkQrilZrilZ3ilZrilZ3ilIDilIDilIDilZrilanilZDilanilZDilanilZDilZ3ilZrilZ3ilZrilZDilZDilanilanilanilZ3ilZrilZ0KW2JvbGQgY3lhbl17fSBieSBOb2N0dXJhWy9ib2xkIGN5YW5dCiIiIi5mb3JtYXQodGl0bGUpCiAgICBjb25zb2xlLnByaW50KGFzY2lpX2FydCwgc3R5bGU9ImJvbGQgZ3JlZW4iKQoKZGVmIGxvY2tfcHl0aG9uX2ZpbGUoZmlsZV9wYXRoKToKICAgIHdpdGggb3BlbihmaWxlX3BhdGgsICJyIiwgZW5jb2Rpbmc9InV0Zi04IikgYXMgZjoKICAgICAgICBjb250ZW50ID0gZi5yZWFkKCkKICAgIGVuY29kZWQgPSBiYXNlNjQuYjY0ZW5jb2RlKGNvbnRlbnQuZW5jb2RlKCJ1dGYtOCIpKS5kZWNvZGUoInV0Zi04IikKICAgIHRlbXBsYXRlID0gZicnJyMgRW5jcnlwdGVkIGJ5IE5vY3R1cmEKaW1wb3J0IGJhc2U2NApleGVjKGJhc2U2NC5iNjRkZWNvZGUoIntlbmNvZGVkfSIpLmRlY29kZSgidXRmLTgiKSkKJycnCiAgICBvdXRfZmlsZSA9IGZpbGVfcGF0aC5yZXBsYWNlKCIucHkiLCAiX2xvY2tlZF9ieV9Ob2N0dXJhLnB5IikKICAgIHdpdGggb3BlbihvdXRfZmlsZSwgInciLCBlbmNvZGluZz0idXRmLTgiKSBhcyBmOgogICAgICAgIGYud3JpdGUodGVtcGxhdGUpCiAgICByZXR1cm4gb3V0X2ZpbGUKCmRlZiBsb2NrX2pzX2ZpbGUoZmlsZV9wYXRoKToKICAgIHdpdGggb3BlbihmaWxlX3BhdGgsICJyIiwgZW5jb2Rpbmc9InV0Zi04IikgYXMgZjoKICAgICAgICBjb250ZW50ID0gZi5yZWFkKCkKICAgIGVuY29kZWQgPSBiYXNlNjQuYjY0ZW5jb2RlKGNvbnRlbnQuZW5jb2RlKCJ1dGYtOCIpKS5kZWNvZGUoInV0Zi04IikKICAgIHRlbXBsYXRlID0gZicnJy8vIEVuY3J5cHRlZCBieSBOb2N0dXJhCmV2YWwoYXRvYigie2VuY29kZWR9IikpOwonJycKICAgIG91dF9maWxlID0gZmlsZV9wYXRoLnJlcGxhY2UoIi5qcyIsICJfbG9ja2VkX2J5X05vY3R1cmEuanMiKQogICAgd2l0aCBvcGVuKG91dF9maWxlLCAidyIsIGVuY29kaW5nPSJ1dGYtOCIpIGFzIGY6CiAgICAgICAgZi53cml0ZSh0ZW1wbGF0ZSkKICAgIHJldHVybiBvdXRfZmlsZQoKZGVmIGxvY2tfaHRtbF9maWxlKGZpbGVfcGF0aCk6CiAgICB3aXRoIG9wZW4oZmlsZV9wYXRoLCAiciIsIGVuY29kaW5nPSJ1dGYtOCIpIGFzIGY6CiAgICAgICAgY29udGVudCA9IGYucmVhZCgpCiAgICBlbmNvZGVkID0gYmFzZTY0LmI2NGVuY29kZShjb250ZW50LmVuY29kZSgidXRmLTgiKSkuZGVjb2RlKCJ1dGYtOCIpCiAgICB0ZW1wbGF0ZSA9IGYiIiIKPCFET0NUWVBFIGh0bWw+CjxodG1sPgo8aGVhZD4KICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+CiAgPHRpdGxlPkxvY2tlZCBCeSBOb2N0dXJhPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KICA8c2NyaXB0PgogICAgY29uc3QgZW5jb2RlZCA9IGB7ZW5jb2RlZH1gOwogICAgY29uc3QgZGVjb2RlZCA9IGF0b2IoZW5jb2RlZCk7CiAgICBkb2N1bWVudC53cml0ZShkZWNvZGVkKTsKICA8L3NjcmlwdD4KPC9ib2R5Pgo8L2h0bWw+CiIiIgogICAgb3V0X2ZpbGUgPSBmaWxlX3BhdGgucmVwbGFjZSgiLmh0bWwiLCAiX2xvY2tlZF9ieV9Ob2N0dXJhLmh0bWwiKQogICAgd2l0aCBvcGVuKG91dF9maWxlLCAidyIsIGVuY29kaW5nPSJ1dGYtOCIpIGFzIGY6CiAgICAgICAgZi53cml0ZSh0ZW1wbGF0ZSkKICAgIHJldHVybiBvdXRfZmlsZQoKZGVmIHByb3Nlc19lbmNyeXB0KGplbmlzLCBla3N0ZW5zaSwgZnVuZ3NpKToKICAgIGJhbm5lcl9lbmNyeXB0b3IoZiJ7amVuaXN9IEVuY3J5cHRvciIpCiAgICBjb25zb2xlLnByaW50KFBhbmVsKAogICAgICAgIGYiTWFzdWtrYW4gbG9rYXNpIGZpbGUge2plbmlzfSB5YW5nIGluZ2luIGRpZW5rcmlwc2lcbmNvbnRvaDogW2JvbGRdL3NkY2FyZC9zY3JpcHQue2Vrc3RlbnNpfVsvYm9sZF0iLAogICAgICAgIHRpdGxlPSJJbnB1dCBGaWxlIiwgc3R5bGU9ImN5YW4iCiAgICApKQogICAgZmlsZV9wYXRoID0gY29uc29sZS5pbnB1dCgiW2JvbGQgZ3JlZW5dPj4+IFBhdGggZmlsZTogWy9ib2xkIGdyZWVuXSIpCgogICAgaWYgbm90IG9zLnBhdGguaXNmaWxlKGZpbGVfcGF0aCk6CiAgICAgICAgY29uc29sZS5wcmludCgiW2JvbGQgcmVkXUZpbGUgdGlkYWsgZGl0ZW11a2FuIVsvYm9sZCByZWRdIikKICAgICAgICByZXR1cm4KCiAgICBjb25zb2xlLnByaW50KCJcbltib2xkIHllbGxvd11NZW5nZW5rcmlwc2kgZmlsZS4uLlsvYm9sZCB5ZWxsb3ddXG4iKQogICAgZm9yIF8gaW4gdHJhY2socmFuZ2UoMzApLCBkZXNjcmlwdGlvbj1mIj4+IE1lbmdlbmtyaXBzaSB7amVuaXN9Li4uIik6CiAgICAgICAgc2xlZXAoMC4wMikKCiAgICBvdXRfZmlsZSA9IGZ1bmdzaShmaWxlX3BhdGgpCgogICAgY29uc29sZS5wcmludChQYW5lbC5maXQoCiAgICAgICAgZiJbZ3JlZW5dU3Vrc2VzIVsvZ3JlZW5dIEZpbGUgdGVyZW5rcmlwc2kgZGlzaW1wYW4gc2ViYWdhaTpcbltib2xkIGN5YW5de291dF9maWxlfVsvYm9sZCBjeWFuXSIsCiAgICAgICAgdGl0bGU9Iltib2xkIG1hZ2VudGFdU2VsZXNhaVsvYm9sZCBtYWdlbnRhXSIsIGJvcmRlcl9zdHlsZT0iYnJpZ2h0X21hZ2VudGEiCiAgICApKQoKIyBNYWluIG1lbnUgbG9vcAp3aGlsZSBUcnVlOgogICAgYmFubmVyX2VuY3J5cHRvcigiTXVsdGkgRW5jcnlwdG9yIikKCiAgICBjb25zb2xlLnByaW50KFBhbmVsLmZpdCgKICAgICAgICAiWzFdIEVua3JpcHNpIFB5dGhvbiAoLnB5KVxuWzJdIEVua3JpcHNpIEphdmFTY3JpcHQgKC5qcylcblszXSBFbmtyaXBzaSBIVE1MICguaHRtbClcbls0XSBLZWx1YXIiLAogICAgICAgIHRpdGxlPSJQaWxpaCBUaXBlIEZpbGUiLCBzdHlsZT0iY3lhbiIpCiAgICApCiAgICBwaWxpaGFuID0gY29uc29sZS5pbnB1dCgiW2JvbGQgZ3JlZW5dPj4+IE1hc3Vra2FuIHBpbGloYW4gKDEvMi8zLzQpOiBbL2JvbGQgZ3JlZW5dIikuc3RyaXAoKQoKICAgIGlmIHBpbGloYW4gPT0gIjEiOgogICAgICAgIHByb3Nlc19lbmNyeXB0KCJQeXRob24iLCAicHkiLCBsb2NrX3B5dGhvbl9maWxlKQogICAgZWxpZiBwaWxpaGFuID09ICIyIjoKICAgICAgICBwcm9zZXNfZW5jcnlwdCgiSmF2YVNjcmlwdCIsICJqcyIsIGxvY2tfanNfZmlsZSkKICAgIGVsaWYgcGlsaWhhbiA9PSAiMyI6CiAgICAgICAgcHJvc2VzX2VuY3J5cHQoIkhUTUwiLCAiaHRtbCIsIGxvY2tfaHRtbF9maWxlKQogICAgZWxpZiBwaWxpaGFuID09ICI0IjoKICAgICAgICBjb25zb2xlLnByaW50KCJcbltib2xkIHJlZF0+PiBQcm9ncmFtIHNlbGVzYWkhWy9ib2xkIHJlZF0iKQogICAgICAgIGJyZWFrCiAgICBlbHNlOgogICAgICAgIGNvbnNvbGUucHJpbnQoIltib2xkIHJlZF1QaWxpaGFuIHRpZGFrIHZhbGlkIVsvYm9sZCByZWRdIikKICAgICAgICBjb250aW51ZQoKICAgIHVsYW5nID0gY29uc29sZS5pbnB1dCgiXG5bYm9sZCBjeWFuXUluZ2luIG1lbmdlbmtyaXBzaSBmaWxlIGxhaW4/ICh5L24pOiBbL2JvbGQgY3lhbl0iKS5sb3dlcigpCiAgICBpZiB1bGFuZyAhPSAieSI6CiAgICAgICAgY29uc29sZS5wcmludCgiXG5bYm9sZCByZWRdPj4gUHJvZ3JhbSBzZWxlc2FpIVsvYm9sZCByZWRdIikKICAgICAgICBicmVhaw==").decode("utf-8"))
